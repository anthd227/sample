<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sonax.api.loginLog.dao.LoginLogDao">
	<sql id="loginLogFields">
		LOG.USER_ID
		, LOG.USER_IP
		, LOG.LOG_DATE
		, LOG.LOG_TYPE
		, LOG.LOG_CONTENT
	</sql>
	
	<select id="getLoginLogList"
		resultType="com.sonax.api.loginLog.model.LoginLogModel">
		/* com.sonax.api.loginLog.dao.LoginLogDao.getLoginLogList */
		SELECT 
			<include refid="loginLogFields"/>
		FROM T_LOGIN_LOG
		ORDER BY LOG_DATE DESC
	</select>

	<select id="getLoginLogById"
		parameterType="com.sonax.api.loginLog.model.LoginLogModel"
		resultType="com.sonax.api.loginLog.model.LoginLogModel">
		/* com.sonax.api.loginLog.dao.LoginLogDao.getLoginLogById */
		SELECT 
			<include refid="loginLogFields"/>
		FROM T_LOGIN_LOG
		WHERE UPPER(USER_ID) = UPPER(#{userId, jdbcType=VARCHAR})
		ORDER BY LOG_DATE DESC
	</select>
	
	<select id="getLoginLogByLogDate"
		parameterType="com.sonax.api.loginLog.model.LoginLogModel"
		resultType="com.sonax.api.loginLog.model.LoginLogModel">
		/* com.sonax.api.loginLog.dao.LoginLogDao.getLoginLogByLogDate */
		SELECT 
			<include refid="loginLogFields"/>
		FROM T_LOGIN_LOG
		WHERE LOG_DATE LIKE CONCAT(#{logDate, jdbcType=VARCHAR}, '%')
		ORDER BY LOG_DATE DESC
	</select>
	
	<select id="getLoginLogByIdAndLogDate"
		parameterType="com.sonax.api.loginLog.model.LoginLogModel"
		resultType="com.sonax.api.loginLog.model.LoginLogModel">
		/* com.sonax.api.loginLog.dao.LoginLogDao.getLoginLogByIdAndLogDate */
		SELECT 
			<include refid="loginLogFields"/>
		FROM T_LOGIN_LOG
		WHERE UPPER(USER_ID) = UPPER(#{userId, jdbcType=VARCHAR})
		AND LOG_DATE LIKE CONCAT(#{logDate, jdbcType=VARCHAR}, '%')
		ORDER BY LOG_DATE DESC
	</select>
	
	<insert id="insertLoginLog"
		parameterType="com.sonax.api.loginLog.model.LoginLogModel">
		/* com.sonax.api.loginLog.dao.LoginLogDao.insertLoginLog */
		INSERT INTO T_LOGIN_LOG (
			USER_ID, USER_IP, LOG_DATE, LOG_TYPE, LOG_CONTENT
		)
		VALUES (
			#{userId, jdbcType=VARCHAR}
			, #{userIp, jdbcType=VARCHAR}	
			, NOW()	
			, #{logType, jdbcType=VARCHAR}	
			, #{logContent, jdbcType=VARCHAR}	
		)
	</insert>
</mapper>